def kruskal(graph):

  edges = []
  for u in graph:
    for v, weight in graph[u]:
      edges.append((weight, u, v))  # Храним ребра с весами

  edges.sort()  # Сортируем ребра по возрастанию веса

  mst = []
  parent = {u: u for u in graph}  # Инициализируем родительский узел для каждой вершины

  def find(u):
    """
    Находит корневой узел для вершины u.
    """
    if parent[u] != u:
      parent[u] = find(parent[u])
    return parent[u]

  def union(u, v):
    """
    Объединяет два поддерева.
    """
    parent[find(u)] = find(v)

  for weight, u, v in edges:
    if find(u) != find(v):  # Проверка на цикл
      mst.append((u, v, weight))
      union(u, v)

  return mst

# Пример использования:
graph = {
    "A" : [("B", 2), ("C", 9)],
    "B" : [("D", 1), ("E", 5), ("F", 9), ("G", 2)],
    "C" : [("G", 1), ("F", 2)],
    "D" : [("H", 12), ("F", 8)],
    "E" : [("C", 2)],
    "F" : [("H", 2)],
    "G" : [("E", 2), ("C", 5)],
    "H" : [],
}

mst = kruskal(graph)

print("Минимальное остовное дерево:")
for u, v, weight in mst:
  print(f"{u} - {v}: {weight}")
