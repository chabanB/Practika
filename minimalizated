import heapq

class Graph:

    def __init__(self, graph:dict, start:str, target:str):

        self.graph = graph
        self.start = start
        self.target = target

    # проверка каждой вершины
        
    def checking_vertices(self):

        visited = set() # посещенные вершины
        queue = [(self.start, 0)] # самый короткий путь и его конечная вершина 
        paths = {} # словарь с путями
        predecessors = {} # словарь с предшественниками-вершинами 

        # заполнение словарей

        paths = {vertex: float('inf') for vertex in self.graph} 
        paths[self.start] = 0
        predecessors = {vertex: None for vertex in self.graph}

        # начало цикла

        while queue:

            current_path = queue[0][1]
            current_ver = queue[0][0]
            queue = []

            print('=', current_ver)
            if current_ver == self.target or self.graph[current_ver] is None:
                print(current_ver)
                continue

            for vertex, path in self.graph[current_ver]:
                visited.add(vertex)
                over_path = current_path + path

                if over_path < paths[vertex]:
                    paths[vertex] = over_path
                    predecessors[vertex] = current_ver
            
            queue.append(min(self.graph[current_ver]))

        print(paths)
            
                


    def get_short_path():
        pass

# входные данные
    
nodes = {
    "A" : [("B", 2), ("C", 9)],
    "B" : [("D", 1), ("E", 5), ("F", 9), ("G", 2)],
    "C" : [("F", 2), ("G", 1)],
    "D" : [("H", 12), ("F", 8)],
    "E" : [("C", 2)],
    "F" : [("H", 12)],
    "G" : [("E", 2), ("C", 5)],
    "H" : None,
}

start_node = "A"
target_node = "E"

# конец входных данных

test = Graph(nodes, start_node, target_node)
test.checking_vertices()

####
chatGPT
####

import sys

def dijkstra_oriented(graph, start):
    """
    Алгоритм Дейкстры для поиска кратчайших путей от стартовой вершины до всех остальных вершин в ориентированном графе.

    Args:
        graph: Словарь, представляющий ориентированный граф. Ключи - вершины, значения - списки пар (соседняя вершина, вес ребра).
        start: Стартовая вершина.

    Returns:
        Словарь, содержащий кратчайшие расстояния от стартовой вершины до всех остальных вершин.
    """

    distances = {vertex: sys.maxsize for vertex in graph}
    distances[start] = 0

    visited = set()
    queue = [(0, start)]  # (расстояние, вершина)

    while queue:
        current_distance, current_vertex = min(queue)
        queue.remove((current_distance, current_vertex))

        if current_vertex in visited:
            continue

        visited.add(current_vertex)

        for neighbor, weight in graph[current_vertex]:
            new_distance = current_distance + weight
            if new_distance < distances[neighbor]:
                distances[neighbor] = new_distance
                queue.append((new_distance, neighbor))

    return distances

# Пример использования
graph = {
    "A" : [("B", 2), ("C", 9)],
    "B" : [("D", 1), ("E", 5), ("F", 9), ("G", 2)],
    "C" : [("F", 2), ("G", 1)],
    "D" : [("H", 12), ("F", 8)],
    "E" : [("C", 2)],
    "F" : [("H", 2)],
    "G" : [("E", 2), ("C", 5)],
    "H" : [],
}

start_vertex = 'A'
shortest_distances = dijkstra_oriented(graph, start_vertex)

print(f"Кратчайшие расстояния от вершины '{start_vertex}':")
for vertex, distance in shortest_distances.items():
    print(f"  {vertex}: {distance}")
